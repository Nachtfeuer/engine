{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome","title":"Home"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"line/","text":"The line in 3d Line representation The line can be defined as a point and a direction like following: line = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + k \\cdot \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right) line = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + k \\cdot \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right) For k = 0 k = 0 it is the start point of the line and for k = 1 k = 1 it is the end point of the line. Angle between lines The calculation of the angle is related to the direction vectors of both lines which you find in vector documention. Intersection point of two lines First to say it's more likely in 3d space that two lines do not intersect while in 2d the only case where to lines do not intersect is when they are parallel. However the calculation is not too hard considering following approach: First we have two lines as shown in line representation but with two different factors which should provide us the same point when there is an intersection so we can say: p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} First we do is we subtract p1 on both sides. a \\cdot \\vec{v1} = p2 - p1 + b \\cdot \\vec{v2} a \\cdot \\vec{v1} = p2 - p1 + b \\cdot \\vec{v2} Now we apply cross product \\vec{v2} \\vec{v2} on both sides. a \\cdot \\vec{v1} \\times \\vec{v2} = (p2 - p1) \\times \\vec{v2} a \\cdot \\vec{v1} \\times \\vec{v2} = (p2 - p1) \\times \\vec{v2} The b \\cdot \\vec{v2} b \\cdot \\vec{v2} did go away because the cross product with same vector is the null vector. From programming perspective you now have to consider that two lines can refer - as special cases - to a plane where one dimension might go away. As a result you have three ways how to calculate the factor a a : First: we define \\vec{v3} = \\vec{v1} \\times \\vec{v2} \\vec{v3} = \\vec{v1} \\times \\vec{v2} and \\vec{v4} = (p2 - p1) \\times \\vec{v2} \\vec{v4} = (p2 - p1) \\times \\vec{v2} Solution 1: a = v4_x / v3_x a = v4_x / v3_x (when v3_x v3_x is not 0) Solution 2: a = v4_y / v3_y a = v4_y / v3_y (when v3_y v3_y is not 0) Solution 3: a = v4_z / v3_z a = v4_z / v3_z (when v3_z v3_z is not 0) If no solution does match then there is no intersection point otherwise you now can use first line p1 + a \\cdot \\vec{v1} p1 + a \\cdot \\vec{v1} to calculate the intersection point. For the basic idea thank you very much to the great guys here: http://mathforum.org/library/drmath/view/62814.html","title":"The line in 3d"},{"location":"line/#the-line-in-3d","text":"","title":"The line in 3d"},{"location":"line/#line-representation","text":"The line can be defined as a point and a direction like following: line = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + k \\cdot \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right) line = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + k \\cdot \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right) For k = 0 k = 0 it is the start point of the line and for k = 1 k = 1 it is the end point of the line.","title":"Line representation"},{"location":"line/#angle-between-lines","text":"The calculation of the angle is related to the direction vectors of both lines which you find in vector documention.","title":"Angle between lines"},{"location":"line/#intersection-point-of-two-lines","text":"First to say it's more likely in 3d space that two lines do not intersect while in 2d the only case where to lines do not intersect is when they are parallel. However the calculation is not too hard considering following approach: First we have two lines as shown in line representation but with two different factors which should provide us the same point when there is an intersection so we can say: p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} First we do is we subtract p1 on both sides. a \\cdot \\vec{v1} = p2 - p1 + b \\cdot \\vec{v2} a \\cdot \\vec{v1} = p2 - p1 + b \\cdot \\vec{v2} Now we apply cross product \\vec{v2} \\vec{v2} on both sides. a \\cdot \\vec{v1} \\times \\vec{v2} = (p2 - p1) \\times \\vec{v2} a \\cdot \\vec{v1} \\times \\vec{v2} = (p2 - p1) \\times \\vec{v2} The b \\cdot \\vec{v2} b \\cdot \\vec{v2} did go away because the cross product with same vector is the null vector. From programming perspective you now have to consider that two lines can refer - as special cases - to a plane where one dimension might go away. As a result you have three ways how to calculate the factor a a : First: we define \\vec{v3} = \\vec{v1} \\times \\vec{v2} \\vec{v3} = \\vec{v1} \\times \\vec{v2} and \\vec{v4} = (p2 - p1) \\times \\vec{v2} \\vec{v4} = (p2 - p1) \\times \\vec{v2} Solution 1: a = v4_x / v3_x a = v4_x / v3_x (when v3_x v3_x is not 0) Solution 2: a = v4_y / v3_y a = v4_y / v3_y (when v3_y v3_y is not 0) Solution 3: a = v4_z / v3_z a = v4_z / v3_z (when v3_z v3_z is not 0) If no solution does match then there is no intersection point otherwise you now can use first line p1 + a \\cdot \\vec{v1} p1 + a \\cdot \\vec{v1} to calculate the intersection point. For the basic idea thank you very much to the great guys here: http://mathforum.org/library/drmath/view/62814.html","title":"Intersection point of two lines"},{"location":"plane/","text":"The Plane in 3d Plane representation The plane can be defined as a point and two directions like following: plane = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + a \\cdot \\left(\\array{v1_x \\\\ v1_y \\\\ v1_z}\\right) + b \\cdot \\left(\\array{v2_x \\\\ v2_y \\\\ v2_z}\\right) plane = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + a \\cdot \\left(\\array{v1_x \\\\ v1_y \\\\ v1_z}\\right) + b \\cdot \\left(\\array{v2_x \\\\ v2_y \\\\ v2_z}\\right) Following factor rules apply: For a = 0 a = 0 and b = 0 b = 0 we have just the point p p . For a = 1 a = 1 and b = 0 b = 0 we the p1 + \\vec{v1} p1 + \\vec{v1} . For a = 0 a = 0 and b = 1 b = 1 we the p1 + \\vec{v2} p1 + \\vec{v2} . For a = 1 a = 1 and b = 1 b = 1 we the p1 + \\vec{v1} + \\vec{v2} p1 + \\vec{v1} + \\vec{v2} . For a = 0.5 a = 0.5 and b = 0.5 b = 0.5 we have the center point. Intersection point of a line with a plane Calculation works in follwing steps: We define a line L to be equal to plane P as following: p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} When there is a solution we should have values for the three factors. So we should get rid of two factors to be able to calculate one. We start with it subtracting the point p1 p1 on both sides. a \\cdot \\vec{v1} = (p2 - p1) + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} a \\cdot \\vec{v1} = (p2 - p1) + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} Now we do a cross product with v3 v3 on both sides; that does eliminate last term because a \\vec{v3} \\times \\vec{v3} \\vec{v3} \\times \\vec{v3} is the null vector. a \\cdot \\vec{v1} \\times \\vec{v3} = (p2 - p1) \\times \\vec{v3} + b \\cdot \\vec{v2} \\times \\vec{v3} a \\cdot \\vec{v1} \\times \\vec{v3} = (p2 - p1) \\times \\vec{v3} + b \\cdot \\vec{v2} \\times \\vec{v3} Again we use the same trick to elimate last term by applying a cross product of \\vec{v2} \\times \\vec{v3} \\vec{v2} \\times \\vec{v3} on both sides. a \\cdot (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) a \\cdot (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) Before we can run the final logic we should have two vectors: \\vec{v4} = (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) \\vec{v4} = (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) \\vec{v5} = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) \\vec{v5} = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) As a result you have three ways how to calculate the factor a a : Solution 1: a = v5_x / v4_x a = v5_x / v4_x (when v4_x v4_x is not 0) Solution 2: a = v5_y / v4_y a = v5_y / v4_y (when v4_y v4_y is not 0) Solution 3: a = v5_z / v4_z a = v5_z / v4_z (when v4_z v4_z is not 0) If no solution does match then there is no intersection point otherwise you now can use first line p1 + a \\cdot \\vec{v1} p1 + a \\cdot \\vec{v1} to calculate the intersection point. You are able to see whether the point is between start and end point of line (for 0.0 <= a <= 1.0 0.0 <= a <= 1.0 ) but you would have to calculate b b and c c to know same for plane.","title":"The Plane in 3d"},{"location":"plane/#the-plane-in-3d","text":"","title":"The Plane in 3d"},{"location":"plane/#plane-representation","text":"The plane can be defined as a point and two directions like following: plane = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + a \\cdot \\left(\\array{v1_x \\\\ v1_y \\\\ v1_z}\\right) + b \\cdot \\left(\\array{v2_x \\\\ v2_y \\\\ v2_z}\\right) plane = \\left(\\array{p_x \\\\ p_y \\\\ p_z}\\right) + a \\cdot \\left(\\array{v1_x \\\\ v1_y \\\\ v1_z}\\right) + b \\cdot \\left(\\array{v2_x \\\\ v2_y \\\\ v2_z}\\right) Following factor rules apply: For a = 0 a = 0 and b = 0 b = 0 we have just the point p p . For a = 1 a = 1 and b = 0 b = 0 we the p1 + \\vec{v1} p1 + \\vec{v1} . For a = 0 a = 0 and b = 1 b = 1 we the p1 + \\vec{v2} p1 + \\vec{v2} . For a = 1 a = 1 and b = 1 b = 1 we the p1 + \\vec{v1} + \\vec{v2} p1 + \\vec{v1} + \\vec{v2} . For a = 0.5 a = 0.5 and b = 0.5 b = 0.5 we have the center point.","title":"Plane representation"},{"location":"plane/#intersection-point-of-a-line-with-a-plane","text":"Calculation works in follwing steps: We define a line L to be equal to plane P as following: p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} p1 + a \\cdot \\vec{v1} = p2 + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} When there is a solution we should have values for the three factors. So we should get rid of two factors to be able to calculate one. We start with it subtracting the point p1 p1 on both sides. a \\cdot \\vec{v1} = (p2 - p1) + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} a \\cdot \\vec{v1} = (p2 - p1) + b \\cdot \\vec{v2} + c \\cdot \\vec{v3} Now we do a cross product with v3 v3 on both sides; that does eliminate last term because a \\vec{v3} \\times \\vec{v3} \\vec{v3} \\times \\vec{v3} is the null vector. a \\cdot \\vec{v1} \\times \\vec{v3} = (p2 - p1) \\times \\vec{v3} + b \\cdot \\vec{v2} \\times \\vec{v3} a \\cdot \\vec{v1} \\times \\vec{v3} = (p2 - p1) \\times \\vec{v3} + b \\cdot \\vec{v2} \\times \\vec{v3} Again we use the same trick to elimate last term by applying a cross product of \\vec{v2} \\times \\vec{v3} \\vec{v2} \\times \\vec{v3} on both sides. a \\cdot (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) a \\cdot (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) Before we can run the final logic we should have two vectors: \\vec{v4} = (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) \\vec{v4} = (\\vec{v1} \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) \\vec{v5} = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) \\vec{v5} = ((p2 - p1) \\times \\vec{v3}) \\times (\\vec{v2} \\times \\vec{v3}) As a result you have three ways how to calculate the factor a a : Solution 1: a = v5_x / v4_x a = v5_x / v4_x (when v4_x v4_x is not 0) Solution 2: a = v5_y / v4_y a = v5_y / v4_y (when v4_y v4_y is not 0) Solution 3: a = v5_z / v4_z a = v5_z / v4_z (when v4_z v4_z is not 0) If no solution does match then there is no intersection point otherwise you now can use first line p1 + a \\cdot \\vec{v1} p1 + a \\cdot \\vec{v1} to calculate the intersection point. You are able to see whether the point is between start and end point of line (for 0.0 <= a <= 1.0 0.0 <= a <= 1.0 ) but you would have to calculate b b and c c to know same for plane.","title":"Intersection point of a line with a plane"},{"location":"vector/","text":"The vector in 3d Vector representation The vector coordinates are representated by three floats: x, y and z: \\vec{v} = \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right) \\vec{v} = \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right) Length of a vector The length of a vector is calculated with: \\left|\\vec{v}\\right| = \\sqrt{v_x^2 + v_y^2 + v_z^2} \\left|\\vec{v}\\right| = \\sqrt{v_x^2 + v_y^2 + v_z^2} Summation It's a summation per coordinate: \\vec{a} + \\vec{b} = \\left(\\array{a_x + b_x \\\\ a_y + b_y \\\\ a_z + b_y}\\right) \\vec{a} + \\vec{b} = \\left(\\array{a_x + b_x \\\\ a_y + b_y \\\\ a_z + b_y}\\right) The implementation is done by overwriting the __add__ operator which allows you to write in code a + b a + b same way as in the formular. Subtraction It's a subtraction per coordinate: \\vec{a} - \\vec{b} = \\left(\\array{a_x - b_x \\\\ a_y - b_y \\\\ a_z - b_y}\\right) \\vec{a} - \\vec{b} = \\left(\\array{a_x - b_x \\\\ a_y - b_y \\\\ a_z - b_y}\\right) The implementation is done by overwriting the __sub__ operator which allows you to write in code a - b a - b same way as in the formular. Dot product The dot product (also called scalar product ) is calculated this way: \\vec{a} \\cdot \\vec{b} = a_x \\cdot b_x + a_y \\cdot b_y + a_z \\cdot b_z \\vec{a} \\cdot \\vec{b} = a_x \\cdot b_x + a_y \\cdot b_y + a_z \\cdot b_z The __mul__ operater has not been overwritten for it because there is also a further multiplication: cross product. The method for the dot product is dot_product . There following special properties: When \\vec{a} \\cdot \\vec{b} = 0 \\vec{a} \\cdot \\vec{b} = 0 then the angle between those two vectors is 90^\\circ 90^\\circ When the value is negative (> 90^\\circ 90^\\circ ) the direction of the one is opposite to the other. That is useful if you consider rendering of an object; the camera does see the object frontside but one or more triangles of the backside are not visible. That can be detected by calculating the dot product of the camera vector and the triangle plane vector; the backside vector has same direction while the frontside vectors should opposite. Cross Product The cross product is calculated this way (result is again a vector): \\vec{a} \\times \\vec{b} = \\left(\\array{a_y \\cdot b_z - a_z \\cdot b_y \\\\ a_z \\cdot b_x - a_x \\cdot b_z \\\\ a_x \\cdot b_y - a_y \\cdot b_x}\\right) \\vec{a} \\times \\vec{b} = \\left(\\array{a_y \\cdot b_z - a_z \\cdot b_y \\\\ a_z \\cdot b_x - a_x \\cdot b_z \\\\ a_x \\cdot b_y - a_y \\cdot b_x}\\right) The most simple answer for the meaning: The result vector has 90^\\circ 90^\\circ to both vectors and therefor 90^\\circ 90^\\circ to the plan defined by both vectors. Please also note that \\vec{a} \\times \\vec{a} = \\left(\\array{0 \\\\ 0 \\\\ 0}\\right) \\vec{a} \\times \\vec{a} = \\left(\\array{0 \\\\ 0 \\\\ 0}\\right) . This property is (as an example) very useful when calculating the intersection point between two lines. Multiplication with a factor k \\cdot \\vec{v} = \\left(\\array{k \\cdot b_x \\\\ k \\cdot b_y \\\\ k \\cdot b_y}\\right) k \\cdot \\vec{v} = \\left(\\array{k \\cdot b_x \\\\ k \\cdot b_y \\\\ k \\cdot b_y}\\right)","title":"The vector in 3d"},{"location":"vector/#the-vector-in-3d","text":"","title":"The vector in 3d"},{"location":"vector/#vector-representation","text":"The vector coordinates are representated by three floats: x, y and z: \\vec{v} = \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right) \\vec{v} = \\left(\\array{v_x \\\\ v_y \\\\ v_z}\\right)","title":"Vector representation"},{"location":"vector/#length-of-a-vector","text":"The length of a vector is calculated with: \\left|\\vec{v}\\right| = \\sqrt{v_x^2 + v_y^2 + v_z^2} \\left|\\vec{v}\\right| = \\sqrt{v_x^2 + v_y^2 + v_z^2}","title":"Length of a vector"},{"location":"vector/#summation","text":"It's a summation per coordinate: \\vec{a} + \\vec{b} = \\left(\\array{a_x + b_x \\\\ a_y + b_y \\\\ a_z + b_y}\\right) \\vec{a} + \\vec{b} = \\left(\\array{a_x + b_x \\\\ a_y + b_y \\\\ a_z + b_y}\\right) The implementation is done by overwriting the __add__ operator which allows you to write in code a + b a + b same way as in the formular.","title":"Summation"},{"location":"vector/#subtraction","text":"It's a subtraction per coordinate: \\vec{a} - \\vec{b} = \\left(\\array{a_x - b_x \\\\ a_y - b_y \\\\ a_z - b_y}\\right) \\vec{a} - \\vec{b} = \\left(\\array{a_x - b_x \\\\ a_y - b_y \\\\ a_z - b_y}\\right) The implementation is done by overwriting the __sub__ operator which allows you to write in code a - b a - b same way as in the formular.","title":"Subtraction"},{"location":"vector/#dot-product","text":"The dot product (also called scalar product ) is calculated this way: \\vec{a} \\cdot \\vec{b} = a_x \\cdot b_x + a_y \\cdot b_y + a_z \\cdot b_z \\vec{a} \\cdot \\vec{b} = a_x \\cdot b_x + a_y \\cdot b_y + a_z \\cdot b_z The __mul__ operater has not been overwritten for it because there is also a further multiplication: cross product. The method for the dot product is dot_product . There following special properties: When \\vec{a} \\cdot \\vec{b} = 0 \\vec{a} \\cdot \\vec{b} = 0 then the angle between those two vectors is 90^\\circ 90^\\circ When the value is negative (> 90^\\circ 90^\\circ ) the direction of the one is opposite to the other. That is useful if you consider rendering of an object; the camera does see the object frontside but one or more triangles of the backside are not visible. That can be detected by calculating the dot product of the camera vector and the triangle plane vector; the backside vector has same direction while the frontside vectors should opposite.","title":"Dot product"},{"location":"vector/#cross-product","text":"The cross product is calculated this way (result is again a vector): \\vec{a} \\times \\vec{b} = \\left(\\array{a_y \\cdot b_z - a_z \\cdot b_y \\\\ a_z \\cdot b_x - a_x \\cdot b_z \\\\ a_x \\cdot b_y - a_y \\cdot b_x}\\right) \\vec{a} \\times \\vec{b} = \\left(\\array{a_y \\cdot b_z - a_z \\cdot b_y \\\\ a_z \\cdot b_x - a_x \\cdot b_z \\\\ a_x \\cdot b_y - a_y \\cdot b_x}\\right) The most simple answer for the meaning: The result vector has 90^\\circ 90^\\circ to both vectors and therefor 90^\\circ 90^\\circ to the plan defined by both vectors. Please also note that \\vec{a} \\times \\vec{a} = \\left(\\array{0 \\\\ 0 \\\\ 0}\\right) \\vec{a} \\times \\vec{a} = \\left(\\array{0 \\\\ 0 \\\\ 0}\\right) . This property is (as an example) very useful when calculating the intersection point between two lines.","title":"Cross Product"},{"location":"vector/#multiplication-with-a-factor","text":"k \\cdot \\vec{v} = \\left(\\array{k \\cdot b_x \\\\ k \\cdot b_y \\\\ k \\cdot b_y}\\right) k \\cdot \\vec{v} = \\left(\\array{k \\cdot b_x \\\\ k \\cdot b_y \\\\ k \\cdot b_y}\\right)","title":"Multiplication with a factor"}]}